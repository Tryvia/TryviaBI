<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portal</title>

    <style>
        /* CSS */
        :root {
            --primary-color: #0d47a1;
            --secondary-color: #1976d2;
            --accent-color: #00b0ff;
            --hover-color: #0091ea;
            --dark-bg: #0a2b59;
            --error-color: #f44336;
            --success-color: #4caf50;
            --text-color: #ffffff;
            --text-dark: #333333;
            --shadow-color: rgba(0, 0, 0, 0.3);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(145deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            min-height: 100vh;
            color: var(--text-color);
        }

        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 250px;
            height: 100vh;
            background: rgba(var(--primary-color-rgb), 0.9);
            border-right: 1px solid rgba(255, 255, 255, 0.05);
            padding: 20px;
            box-shadow: 2px 0 5px rgba(0,0,0,0.2);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .logo-container {
            margin-bottom: 20px;
            padding-bottom: 0px;
            border-bottom: none;
            width: 100%;
            text-align: center;
        }

        .your-custom-logo {
            width: 180px;
            height: auto;
            max-width: 100%;
            display: block;
            margin: 0 auto;
        }

        .nav-list {
            list-style: none;
            width: 100%;
        }

        .nav-item {
            margin: 10px 0;
            width: 100%;
        }

        .nav-item a, .nav-item button {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(var(--text-color-rgb), 0.8);
            text-decoration: none;
            font-size: 1.1em;
            border-radius: 8px;
            transition: background-color 0.3s ease, color 0.3s ease;
            width: 100%;
            background: none;
            border: none;
            text-align: left;
            cursor: pointer;
        }

        .nav-item a:hover, .nav-item button:hover, .nav-item.active a, .nav-item.active button {
            background-color: rgba(0, 0, 0, 0.2);
            color: var(--text-color);
            transform: translateX(5px);
        }

        .nav-item i {
            margin-right: 15px;
            font-size: 1.3em;
        }

        .main-content {
            margin-left: 250px;
            padding: 30px;
            flex-grow: 1;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            background-color: rgba(0, 0, 0, 0.2);
            padding: 20px 25px;
            border-radius: 12px;
            box-shadow: 0 4px 15px var(--shadow-color);
        }

        .header h1 {
            font-size: 2.2em;
            color: var(--text-color);
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .profile-info {
            display: flex;
            align-items: center;
        }

        .profile-info img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 15px;
            border: 3px solid var(--accent-color);
        }

        .profile-info span {
            font-size: 1.1em;
            font-weight: bold;
            color: var(--text-color);
        }

        .content-section {
            display: none;
            background-color: rgba(0, 0, 0, 0.2);
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 15px var(--shadow-color);
            min-height: 70vh;
        }

        .content-section.active {
            display: block;
        }

        /* Forms */
        .form-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 30px;
            background-color: rgba(255, 255, 255, 0.08);
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            margin-bottom: 30px;
        }

        .form-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 8px;
            font-weight: bold;
            color: rgba(var(--text-color-rgb), 0.9);
        }

        .form-group input[type="text"],
        .form-group input[type="email"],
        .form-group input[type="tel"],
        .form-group input[type="number"],
        .form-group input[type="url"],
        .form-group select,
        .form-group textarea {
            padding: 12px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 6px;
            background-color: rgba(0, 0, 0, 0.3);
            color: var(--text-color);
            font-size: 1em;
            transition: border-color 0.3s ease, background-color 0.3s ease;
        }

        .form-group input::placeholder,
        .form-group textarea::placeholder {
            color: #999;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            border-color: var(--accent-color);
            background-color: rgba(0, 0, 0, 0.4);
            outline: none;
        }

        .btn-primary, .btn-secondary {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1.1em;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin-top: 10px;
        }

        .btn-primary {
            background-color: var(--success-color);
            color: var(--text-color);
            box-shadow: 0 2px 5px rgba(0,128,0,0.5);
        }

        .btn-primary:hover {
            background-color: #45a049;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background-color: var(--secondary-color);
            color: var(--text-color);
            box-shadow: 0 2px 5px rgba(0,0,128,0.5);
        }

        .btn-secondary:hover {
            background-color: var(--hover-color);
            transform: translateY(-2px);
        }

        .upload-area {
            border: 2px dashed rgba(255, 255, 255, 0.5);
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            cursor: pointer;
            transition: border-color 0.3s ease, background-color 0.3s ease;
            margin-top: 5px;
        }

        .upload-area:hover {
            border-color: var(--accent-color);
            background-color: rgba(255, 255, 255, 0.05);
        }

        .upload-icon {
            font-size: 60px;
            margin-bottom: 10px;
            color: rgba(var(--text-color-rgb), 0.8);
        }

        .upload-area p {
            color: rgba(var(--text-color-rgb), 0.7);
            font-size: 1.1em;
        }

        /* Grids and Cards */
        .documents-grid, .clients-grid, .dashboards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            padding: 20px;
            background-color: rgba(255, 255, 255, 0.08);
            border-radius: 10px;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.1);
            min-height: 200px;
        }

        .document-card, .client-card, .dashboard-card {
            background-color: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .document-card:hover, .client-card:hover, .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
        }

        .document-header, .client-card-top {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .document-type, .client-status-card {
            background-color: #FFC107;
            color: var(--text-dark);
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.9em;
            font-weight: bold;
        }
        .client-status-card {
            background-color: var(--success-color);
            color: var(--text-color);
        }

        .delete-btn, .delete-btn-card {
            background: none;
            border: none;
            color: rgba(var(--text-color-rgb), 0.7);
            font-size: 1.2em;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .delete-btn:hover, .delete-btn-card:hover {
            color: var(--error-color);
        }

        .document-title, .client-name {
            font-size: 1.4em;
            font-weight: bold;
            margin-bottom: 5px;
            color: var(--text-color);
        }

        .document-author, .client-email, .client-phone {
            font-size: 0.95em;
            color: rgba(var(--text-color-rgb), 0.7);
            margin-bottom: 10px;
        }

        .empty-state {
            grid-column: 1 / -1;
            text-align: center;
            padding: 50px 20px;
            color: rgba(var(--text-color-rgb), 0.6);
            font-size: 1.2em;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .empty-state-icon {
            font-size: 80px;
            margin-bottom: 20px;
            color: rgba(var(--text-color-rgb), 0.4);
        }

        /* Clientes Tab Specifics */
        .client-tabs {
            display: flex;
            margin-bottom: 30px;
            border-bottom: 2px solid rgba(255, 255, 255, 0.1);
        }

        .client-tab-button {
            padding: 15px 25px;
            border: none;
            background: none;
            color: rgba(var(--text-color-rgb), 0.7);
            font-size: 1.1em;
            cursor: pointer;
            transition: color 0.3s ease, border-bottom 0.3s ease;
            margin-right: 15px;
            border-bottom: 2px solid transparent;
        }

        .client-tab-button.active {
            color: var(--text-color);
            border-bottom-color: var(--accent-color);
            font-weight: bold;
        }

        .client-tab-button:hover {
            color: var(--text-color);
        }

        .client-tab-content {
            display: none;
        }
        
        #add-client .upload-area {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 150px;
            cursor: pointer;
        }

        #add-client .upload-area:hover {
            background-color: rgba(255, 255, 255, 0.08);
        }

        #add-client .logo-preview {
            max-width: 100px;
            max-height: 100px;
            border-radius: 8px;
            object-fit: contain;
            margin-bottom: 10px;
        }

        /* Products List */
        .products-section {
            background-color: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }
        .products-section h4 {
            margin-bottom: 15px;
            color: var(--text-color);
        }
        .products-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }
        .product-item {
            background-color: rgba(255, 255, 255, 0.1);
            padding: 8px 15px;
            border-radius: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            color: var(--text-color);
            font-size: 0.9em;
            white-space: nowrap;
        }
        .product-item .delete-btn {
            font-size: 1em;
            padding: 3px 6px;
            background-color: rgba(255, 0, 0, 0.5);
            border-radius: 50%;
            line-height: 1;
            color: var(--text-color);
            transition: background-color 0.2s ease;
        }
        .product-item .delete-btn:hover {
            background-color: rgba(255, 0, 0, 0.8);
        }
        #productsList {
            margin-top: 15px;
            border-top: 1px solid rgba(255,255,255,0.1);
            padding-top: 15px;
            display: none;
        }

        /* Client Card Vertical (for view-clients tab) */
        .clients-grid {
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        }
        .client-card-vertical {
            background-color: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            position: relative;
        }

        .client-card-vertical:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
        }

        .client-card-top {
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 10px;
        }
        
        .delete-btn-card {
            background-color: rgba(255, 0, 0, 0.5);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0;
            color: var(--text-color);
            font-size: 18px;
        }

        .delete-btn-card:hover {
            background-color: rgba(255, 0, 0, 0.8);
            transform: scale(1.1);
        }

        .client-logo-vertical {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.1);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 3em;
            font-weight: bold;
            color: var(--accent-color);
            margin-bottom: 10px;
            overflow: hidden;
            border: 2px solid rgba(255, 255, 255, 0.2);
        }

        .logo-preview-vertical {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }

        .add-logo-text {
            font-size: 0.8em;
            color: rgba(var(--text-color-rgb), 0.6);
            margin-bottom: 10px;
        }

        .client-name-vertical {
            font-size: 1.5em;
            font-weight: bold;
            margin-bottom: 5px;
            color: var(--text-color);
            word-break: break-word;
        }

        .client-status-text {
            font-size: 0.9em;
            color: var(--success-color);
            margin-bottom: 15px;
        }

        .products-info-vertical {
            width: 100%;
            text-align: left;
            margin-bottom: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            padding-top: 15px;
        }

        .btn-vertical {
            padding: 10px 20px;
            background-color: var(--secondary-color);
            color: var(--text-color);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            width: 90%;
            margin-bottom: 10px;
        }

        .btn-vertical:hover {
            background-color: var(--hover-color);
            transform: translateY(-2px);
        }

        .btn-vertical.edit {
            background-color: var(--secondary-color);
            color: var(--text-color);
        }

        .btn-vertical.edit:hover {
            background-color: var(--hover-color);
        }

        /* Novas Regras para Dashboard */
        .dashboard-card {
            padding: 25px;
            background-color: rgba(0, 0, 0, 0.4);
            text-align: center;
            justify-content: flex-start;
        }

        .dashboard-card .client-logo-vertical {
            width: 100px;
            height: 100px;
            margin: 0 auto 15px auto;
        }

        .dashboard-card h3 {
            font-size: 1.6em;
            margin-bottom: 15px;
            color: var(--text-color);
        }

        .btn-bi {
            background-color: var(--primary-color);
            color: var(--text-color);
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1.1em;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin-top: auto;
        }

        .btn-bi:hover {
            background-color: var(--secondary-color);
            transform: translateY(-2px);
        }

        /* Responsividade */
        @media (max-width: 992px) {
            .sidebar {
                width: 200px;
            }
            .main-content {
                margin-left: 200px;
                padding: 20px;
            }
            .header h1 {
                font-size: 1.8em;
            }
            .nav-item a, .nav-item button {
                font-size: 1em;
                padding: 10px 15px;
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                position: static;
                width: 100%;
                height: auto;
                flex-direction: row;
                justify-content: center;
                padding: 15px;
                border-right: none;
                border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            }
            .logo-container {
                display: block;
                width: auto;
                text-align: center;
                margin-bottom: 15px;
            }
            .sidebar h2 {
                display: none;
            }
            .nav-list {
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
            }
            .nav-item {
                margin: 5px;
                width: auto;
            }
            .nav-item a, .nav-item button {
                font-size: 0.9em;
                padding: 8px 12px;
            }
            .main-content {
                margin-left: 0;
                padding: 20px;
            }
            .header {
                flex-direction: column;
                align-items: flex-start;
                padding: 15px;
            }
            .header h1 {
                margin-bottom: 10px;
            }
            .form-row {
                flex-direction: column;
            }
            .documents-grid, .clients-grid, .dashboards-grid {
                grid-template-columns: 1fr;
                padding: 15px;
            }
            .client-tabs {
                flex-direction: column;
            }
            .client-tab-button {
                margin-bottom: 10px;
                margin-right: 0;
                text-align: center;
            }
        }

        /* Ajustes para uniformizar fundo da aba Homologacao */
        #homologacao,
        #homologacao .form-group,
        #homologacao .upload-area,
        #homologacao .tab-content,
        #homologacao .header,
        #homologacao .filters-section,
        #homologacao .form-row {
            background-color: rgba(0, 0, 0, 0.2);
            color: var(--text-color);
            border-radius: 8px;
            padding: 10px;
        }

        #homologacao input,
        #homologacao select,
        #homologacao textarea {
            background-color: rgba(0, 0, 0, 0.3);
            color: var(--text-color);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 6px;
            padding: 10px;
        }

        #homologacao input::placeholder,
        #homologacao textarea::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        #homologacao .upload-area:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }

        #homologacao .tab-button {
            background: none;
            color: var(--text-color);
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 6px;
            margin-right: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        #homologacao .tab-button.active,
        #homologacao .tab-button:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        /* Estilo para os cards de homologações */
        #homologacoesGrid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .homologacao-card {
            background-color: rgba(0, 0, 0, 0.3);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            color: var(--text-color);
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .homologacao-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
        }

        .homologacao-card h4 {
            margin-bottom: 10px;
            font-size: 1.2em;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding-bottom: 5px;
        }

        .homologacao-card p {
            font-size: 0.95em;
            margin-bottom: 6px;
            color: rgba(255, 255, 255, 0.85);
        }

        .homologacao-card .btn-exportar {
            background-color: var(--accent-color);
            color: var(--text-color);
            padding: 8px 15px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            margin-top: 10px;
            transition: background-color 0.3s ease;
        }

        .homologacao-card .btn-exportar:hover {
            background-color: var(--hover-color);
        }

        /* Custom Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .modal-overlay.visible {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background-color: var(--dark-bg);
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            text-align: center;
            max-width: 400px;
            width: 90%;
            color: var(--text-color);
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }

        .modal-overlay.visible .modal-content {
            transform: translateY(0);
        }

        .modal-content h3 {
            margin-bottom: 20px;
            font-size: 1.5em;
            color: var(--accent-color);
        }

        .modal-content p {
            margin-bottom: 25px;
            font-size: 1.1em;
            line-height: 1.5;
        }

        .modal-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .modal-button {
            padding: 10px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1em;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .modal-button.confirm {
            background-color: var(--error-color);
            color: var(--text-color);
        }

        .modal-button.confirm:hover {
            background-color: #d32f2f;
        }

        .modal-button.cancel {
            background-color: var(--secondary-color);
            color: var(--text-color);
        }

        .modal-button.cancel:hover {
            background-color: var(--hover-color);
        }

        .modal-button.ok {
            background-color: var(--success-color);
            color: var(--text-color);
        }

        .modal-button.ok:hover {
            background-color: #45a049;
        }

        .file-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            margin-bottom: 8px;
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .file-name {
            font-weight: bold;
        }

        .file-size {
            font-size: 0.85em;
            color: rgba(255, 255, 255, 0.7);
        }

        .remove-file {
            background: none;
            border: none;
            color: var(--error-color);
            cursor: pointer;
            font-size: 1.1em;
            transition: color 0.2s ease;
        }

        .remove-file:hover {
            color: #d32f2f;
        }

    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
</head>
<body>
    <div id="customModal" class="modal-overlay">
        <div class="modal-content">
            <h3 id="modalTitle"></h3>
            <p id="modalMessage"></p>
            <div class="modal-buttons" id="modalButtons">
                </div>
        </div>
    </div>

    <div class="sidebar">
        <div class="logo-container">
            <img alt="Sua Logo" class="your-custom-logo" src="logo1.png"/>
        </div>
        <ul class="nav-list">
            <li class="nav-item">
                <button onclick="showTab('dashboard')"><i class="fas fa-chart-line"></i> Dashboards</button>
            </li>
            <li class="nav-item">
                <button onclick="showTab('clients')"><i class="fas fa-users"></i> Clientes</button>
            </li>
            <li class="nav-item">
                <button onclick="window.location.href='https://tryvia.github.io/TryviaBI/mapa.html'"><i class="fas fa-calendar-check"></i> Visitas</button>
            </li>
            <li class="nav-item"><button onclick="showTab('homologacao')"><i class="fas fa-clipboard-check"></i> Homologação</button></li>
            </li>
            <li class="nav-item active">
                <button onclick="showTab('documents')"><i class="fas fa-file-alt"></i> Time de Implantação</button>
            </li>
            <li class="nav-item">
                <a href="#"><i class="fas fa-cog"></i> Configurações</a>
            </li>
            <li class="nav-item">
                <a href="https://tryvia.github.io/TryviaBI/tryvia_bi_login%20(1).html"><i class="fas fa-sign-out-alt"></i> Sair</a>
                   </ul>
    </div>
    <div class="main-content">
        <header class="header">
            <h1>Portal - Time de Implantação</h1>
            <div class="profile-info">
                <img alt="Profile Picture" src="tryvia.png"/>
                <span>Usuário TRYVIA</span>
            </div>
        </header>

        <div class="content-section active" id="documents">
            <div class="form-container">
                <h3 style="margin-bottom: 20px;">Adicionar Novo Documento de Implantação</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="documentTitle">Título</label>
                        <input id="documentTitle" placeholder="Título do documento..." type="text"/>
                    </div>
                    <div class="form-group">
                        <label for="documentAuthor">Autor</label>
                        <input id="documentAuthor" placeholder="Nome do autor..." type="text"/>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="documentType">Tipo</label>
                        <select id="documentType">
                            <option value="">Selecione o tipo</option>
                            <option value="manual">Manual</option>
                            <option value="guia">Guia</option>
                            <option value="checklist">Checklist</option>
                            <option value="template">Template</option>
                            <option value="outro">Outro</option>
                        </select>
                    </div>
                    <div class="form-group" style="flex: 1;">
                        <label for="documentFile">Arquivo</label>
                        <div class="upload-area" onclick="document.getElementById('documentFile').click()">
                            <div class="upload-icon">📄</div>
                            <p>Arraste e solte ou clique para selecionar um arquivo</p>
                            <input id="documentFile" style="display: none;" type="file"/>
                        </div>
                    </div>
                </div>
                <button class="btn-primary" onclick="addDocument()">Adicionar Documento</button>
            </div>
            <h3 style="margin-top: 40px; margin-bottom: 20px;">Documentos Existentes</h3>
            <div class="documents-grid" id="documentsList">
                <div class="empty-state">
                    <div class="empty-state-icon">📁</div>
                    <p>Nenhum documento encontrado</p>
                    <p>Adicione documentos para começar</p>
                </div>
            </div>
        </div>

        <div class="content-section" id="clients">
            <div class="client-tabs">
                <button class="client-tab-button active" onclick="showClientTab('view-clients')">Visualizar Clientes</button>
                <button class="client-tab-button" onclick="showClientTab('add-client')">Adicionar Cliente</button>
                <button class="client-tab-button" id="editClientTabButton" onclick="showClientTab('edit-client-tab')" style="display:none;">Editar Cliente</button>
            </div>
            <div class="client-tab-content" id="view-clients" style="display: block;">
                <h3 style="margin-bottom: 20px;">Lista de Clientes</h3>
                <div class="clients-grid" id="clientsList">
                    <div class="empty-state">
                        <div class="empty-state-icon">👥</div>
                        <p>Nenhum cliente encontrado</p>
                        <p>Adicione clientes para começar</p>
                    </div>
                </div>
            </div>
            <div class="client-tab-content" id="add-client" style="display: none;">
                <div class="form-container">
                    <h3 style="margin-bottom: 20px;">Adicionar Novo Cliente</h3>
                    <div class="form-row">
                        <div class="form-group" style="flex: 0 0 150px; text-align: center;">
                            <label>Logo do Cliente</label>
                            <div class="upload-area" id="logoPreview" onclick="document.getElementById('clientLogo').click()">
                                <div style="font-size: 48px; margin-bottom: 10px;">📷</div>
                                <p>Clique para adicionar logo</p>
                            </div>
                            <input id="clientLogo" onchange="previewLogo(this)" style="display: none;" type="file"/>
                        </div>
                        <div class="form-group" style="flex: 2;">
                            <label for="clientName">Nome do Cliente</label>
                            <input id="clientName" placeholder="Nome completo ou da empresa..." type="text"/>
                            <label for="clientEmail" style="margin-top: 15px;">Email</label>
                            <input id="clientEmail" placeholder="email@exemplo.com" type="email"/>
                            <label for="clientPhone" style="margin-top: 15px;">Telefone</label>
                            <input id="clientPhone" placeholder="(XX) XXXXX-XXXX" type="tel"/>
                            <label for="clientBiLink" style="margin-top: 15px;">Link do Dashboard BI</label>
                            <input id="clientBiLink" placeholder="https://app.powerbi.com/dashboard/..." type="url"/>
                        </div>
                    </div>
                    <div class="products-section">
                        <h4>Produtos / Serviços Associados</h4>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="productName">Nome do Produto/Serviço</label>
                                <input id="productName" placeholder="Ex: Software SaaS, Consultoria..." type="text"/>
                            </div>
                            <div class="form-group" style="flex: 0 0 100px;">
                                <label for="productQuantity">Quantidade</label>
                                <input id="productQuantity" min="1" type="number" value="1"/>
                            </div>
                            <div class="form-group" style="flex: 0 0 120px; display: flex; align-items: flex-end;">
                                <button class="btn-secondary" onclick="addProduct()">Adicionar</button>
                            </div>
                        </div>
                        <div id="productsList">
                            <div class="products-grid" id="productsContainer">
                                <p style="color: rgba(255,255,255,0.7);">Nenhum produto adicionado ainda.</p>
                            </div>
                        </div>
                    </div>
                    <button class="btn-primary" onclick="saveClient()" style="margin-top: 30px;">Salvar Cliente</button>
                </div>
            </div>
            <div class="client-tab-content" id="edit-client-tab" style="display: none;">
                <div class="form-container">
                    <h3 style="margin-bottom: 20px;">Editar Cliente</h3>
                    <input id="editClientId" type="hidden"/>
                    <div class="form-row">
                        <div class="form-group" style="flex: 0 0 150px; text-align: center;">
                            <label>Logo do Cliente</label>
                            <div class="upload-area" id="editLogoPreview" onclick="document.getElementById('editClientLogo').click()">
                                <div style="font-size: 48px; margin-bottom: 10px;">📷</div>
                                <p>Clique para adicionar logo</p>
                            </div>
                            <input id="editClientLogo" onchange="previewEditLogo(this)" style="display: none;" type="file"/>
                        </div>
                        <div class="form-group" style="flex: 2;">
                            <label for="editClientName">Nome do Cliente</label>
                            <input id="editClientName" placeholder="Nome completo ou da empresa..." type="text"/>
                            <label for="editClientEmail" style="margin-top: 15px;">Email</label>
                            <input id="editClientEmail" placeholder="email@exemplo.com" type="email"/>
                            <label for="editClientPhone" style="margin-top: 15px;">Telefone</label>
                            <input id="editClientPhone" placeholder="(XX) XXXXX-XXXX" type="tel"/>
                            <label for="editClientBiLink" style="margin-top: 15px;">Link do Dashboard BI</label>
                            <input id="editClientBiLink" placeholder="https://app.powerbi.com/dashboard/..." type="url"/>
                        </div>
                    </div>
                    <div class="products-section">
                        <h4>Produtos / Serviços Associados</h4>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="editProductName">Nome do Produto/Serviço</label>
                                <input id="editProductName" placeholder="Ex: Software SaaS, Consultoria..." type="text"/>
                            </div>
                            <div class="form-group" style="flex: 0 0 100px;">
                                <label for="editProductQuantity">Quantidade</label>
                                <input id="editProductQuantity" min="1" type="number" value="1"/>
                            </div>
                            <div class="form-group" style="flex: 0 0 120px; display: flex; align-items: flex-end;">
                                <button class="btn-secondary" onclick="addEditProduct()">Adicionar</button>
                            </div>
                        </div>
                        <div id="editProductsList">
                            <div class="products-grid" id="editProductsContainer">
                                <p style="color: rgba(255,255,255,0.7);">Nenhum produto adicionado ainda.</p>
                            </div>
                        </div>
                    </div>
                    <button class="btn-primary" onclick="updateClient()" style="margin-top: 30px;">Atualizar Cliente</button>
                    <button class="btn-secondary" onclick="showClientTab('view-clients')" style="margin-top: 30px; margin-left: 10px;">Cancelar</button>
                </div>
            </div>
            <div class="client-tab-content" id="view-client-documents" style="display:none;">
            </div>
        </div>

        <div class="content-section" id="dashboard">
            <h3 style="margin-bottom: 20px;">Dashboards de Clientes</h3>
            <div class="dashboards-grid" id="dashboardsList">
                <div class="empty-state">
                    <div class="empty-state-icon">📊</div>
                    <p>Nenhum Dashboard de cliente encontrado.</p>
                    <p>Adicione clientes com links de BI para visualizá-los aqui.</p>
                </div>
            </div>
        </div>

        <div class="content-section" id="homologacao">
            <div class="main-container">
                <div class="header">
                    <h1>Gerenciador de Homologações</h1>
                    <p>Organize seus registros de homologação de forma eficiente.</p>
                </div>
                <div class="tabs">
                    <button class="tab-button active" onclick="openHomologacaoTab(event, 'formularioHomologacao')">
                        📝 Formulário de Registro
                    </button>
                    <button class="tab-button" onclick="openHomologacaoTab(event, 'listaHomologacoes')">
                        📚 Homologações Registradas
                    </button>
                </div>
                <div class="tab-content active" id="formularioHomologacao">
                    <form id="homologacaoForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="especialista">👨‍💻 Especialista Responsável</label>
                                <input id="especialista" name="especialista" required="" type="text"/>
                            </div>
                            <div class="form-group">
                                <label for="versao">📋 Versão</label>
                                <input id="versao" name="versao" placeholder="Ex: v1.2.3" required="" type="text"/>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="dataLiberacao">📅 Data de Liberação</label>
                                <input id="dataLiberacao" name="dataLiberacao" required="" type="date"/>
                            </div>
                            <div class="form-group">
                                <label for="dataHomologacao">✅ Data de Homologação</label>
                                <input id="dataHomologacao" name="dataHomologacao" type="date"/>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="sistema">🖥️ Sistema</label>
                            <select id="sistema" name="sistema" required="">
                                <option value="">Selecione o sistema</option>
                                <option value="Sistema Web">Sistema Web</option>
                                <option value="Sistema Mobile">Sistema Mobile</option>
                                <option value="API Rest">API Rest</option>
                                <option value="Sistema Desktop">Sistema Desktop</option>
                                <option value="Microserviço">Microserviço</option>
                                <option value="Outro">Outro</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="observacao">📝 Observações</label>
                            <textarea id="observacao" name="observacao" placeholder="Descreva detalhes da homologação, testes realizados, bugs encontrados, etc."></textarea>
                        </div>
                        <div class="form-group">
                            <label>📁 Arquivos de Homologação</label>
                            <div class="upload-area" id="uploadAreaHomologacao">
                                <div class="upload-icon">☁️</div>
                                <div class="upload-text">Clique aqui ou arraste arquivos</div>
                                <div class="upload-subtext">PDF, DOC, XLS, IMG até 10MB cada</div>
                            </div>
                            <input accept=".pdf,.doc,.docx,.xls,.xlsx,.png,.jpg,.jpeg,.gif" id="fileInputHomologacao" multiple="" type="file"/>
                            <div class="file-list" id="fileListHomologacao"></div>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-secondary" onclick="limparHomologacaoForm()" type="button">
                                🔄 Limpar
                            </button>
                            <button class="btn btn-primary" type="submit">
                                💾 Salvar Homologação
                            </button>
                        </div>
                    </form>
                </div>
                <div class="tab-content" id="listaHomologacoes">
                    <div class="filters-section">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="filtroSistema">🔍 Filtrar por Sistema</label>
                                <select id="filtroSistema" onchange="filtrarHomologacoes()">
                                    <option value="">Todos os sistemas</option>
                                    <option value="Sistema Web">Sistema Web</option>
                                    <option value="Sistema Mobile">Sistema Mobile</option>
                                    <option value="API Rest">API API Rest</option>
                                    <option value="Sistema Desktop">Sistema Desktop</option>
                                    <option value="Microserviço">Microserviço</option>
                                    <option value="Outro">Outro</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="filtroEspecialista">👨‍💻 Filtrar por Especialista</label>
                                <input id="filtroEspecialista" onkeyup="filtrarHomologacoes()" placeholder="Nome do especialista" type="text"/>
                            </div>
                        </div>
                    </div>
                    <div class="homologacoes-grid" id="homologacoesGrid">
                    </div>
                    <div class="empty-state" id="emptyStateHomologacao" style="display: none;">
                        <div>📋</div>
                        <h3>Nenhuma homologação encontrada</h3>
                        <p>Registre sua primeira homologação usando o formulário na aba "Formulário de Registro".</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>

    <script>
        // --- Custom Modal Functions ---
        let resolveModalPromise;

        /**
         * Shows a custom alert modal.
         * @param {string} title - The title of the modal.
         * @param {string} message - The message content.
         */
        function showAlert(title, message) {
            const modal = document.getElementById('customModal');
            document.getElementById('modalTitle').textContent = title;
            document.getElementById('modalMessage').textContent = message;
            const buttonsContainer = document.getElementById('modalButtons');
            buttonsContainer.innerHTML = `<button class="modal-button ok">OK</button>`;
            
            const okButton = buttonsContainer.querySelector('.ok');
            okButton.onclick = () => {
                modal.classList.remove('visible');
            };
            modal.classList.add('visible');
        }

        /**
         * Shows a custom confirmation modal.
         * @param {string} title - The title of the modal.
         * @param {string} message - The message content.
         * @returns {Promise<boolean>} A promise that resolves to true if confirmed, false otherwise.
         */
        function showConfirm(title, message) {
            return new Promise((resolve) => {
                resolveModalPromise = resolve; // Store the resolve function
                const modal = document.getElementById('customModal');
                document.getElementById('modalTitle').textContent = title;
                document.getElementById('modalMessage').textContent = message;
                const buttonsContainer = document.getElementById('modalButtons');
                buttonsContainer.innerHTML = `
                    <button class="modal-button confirm">Confirmar</button>
                    <button class="modal-button cancel">Cancelar</button>
                `;

                const confirmButton = buttonsContainer.querySelector('.confirm');
                const cancelButton = buttonsContainer.querySelector('.cancel');

                confirmButton.onclick = () => {
                    modal.classList.remove('visible');
                    resolveModalPromise(true);
                };
                cancelButton.onclick = () => {
                    modal.classList.remove('visible');
                    resolveModalPromise(false);
                };
                modal.classList.add('visible');
            });
        }

        // --- Supabase Initialization ---
        const SUPABASE_URL = 'https://mzjdmhgkrroajmsfwryu.supabase.co'; // Replace with your actual Supabase URL
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im16amRtaGdrcnJvYWptc2Z3cnl1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgyMzMwMzUsImV4cCI6MjA2MzgwOTAzNX0.tQCwUfFCV7sD-IexQviU0XEPcbn9j5uK9NSUbH-OeBc'; 
        
        // Ensure supabase client is created only once
        if (!window.supabaseClient) {
            window.supabaseClient = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        }
        const supabase = window.supabaseClient;

        // Global data storage (will be replaced by Supabase data)
        let documents = [];
        let clients = [];
        let currentProducts = []; // For adding new clients
        let editingProducts = []; // For editing existing clients
        let arquivosHomologacaoSelecionados = []; // For homologation files

        // Helper function to convert hex to rgb for rgba usage
        function hexToRgb(hex) {
            var bigint = parseInt(hex.slice(1), 16);
            var r = (bigint >> 16) & 255;
            var g = (bigint >> 8) & 255;
            var b = bigint & 255;
            return `${r}, ${g}, ${b}`;
        }

        // Set RGB variables dynamically for rgba usage
        document.documentElement.style.setProperty('--primary-color-rgb', hexToRgb(getComputedStyle(document.documentElement).getPropertyValue('--primary-color')));
        document.documentElement.style.setProperty('--text-color-rgb', hexToRgb(getComputedStyle(document.documentElement).getPropertyValue('--text-color')));

        /**
         * Switches between main content tabs.
         * @param {string} tabId - The ID of the tab to show.
         */
        function showTab(tabId) {
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            const el = document.getElementById(tabId);
            if (el) { el.classList.add('active'); }

            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            const navItemToActivate = document.querySelector(`.nav-item button[onclick="showTab('${tabId}')"]`);
            if (navItemToActivate) {
                 navItemToActivate.parentElement.classList.add('active');
            }

            // Render content specific to the tab
            if (tabId === 'documents') {
                fetchAndRenderDocuments();
            } else if (tabId === 'clients') {
                document.getElementById('editClientTabButton').style.display = 'none';
                showClientTab('view-clients');
                fetchAndRenderClients();
            } else if (tabId === 'homologacao') {
                openHomologacaoTab(null, 'formularioHomologacao'); // Default to form when entering homologacao tab
                fetchAndRenderHomologacoes(); // Fetch and render list when entering homologacao tab
            } else if (tabId === 'dashboard') {
                fetchAndRenderDashboards(); 
            }
        }

        /**
         * Switches between client sub-tabs.
         * @param {string} tabId - The ID of the client sub-tab to show.
         */
        function showClientTab(tabId) {
            document.querySelectorAll('.client-tab-content').forEach(section => {
                section.style.display = 'none';
            });
            const el = document.getElementById(tabId);
            if (el) { el.style.display = 'block'; }

            document.querySelectorAll('.client-tab-button').forEach(button => {
                button.classList.remove('active');
            });
            const activeClientButton = document.querySelector(`.client-tab-button[onclick="showClientTab('${tabId}')"]`);
            if (activeClientButton) {
                activeClientButton.classList.add('active');
            }

            const editButton = document.getElementById('editClientTabButton');
            if (tabId === 'edit-client-tab') {
                editButton.style.display = 'block';
                editButton.classList.add('active');
            } else {
                editButton.style.display = 'none';
                editButton.classList.remove('active');
            }

            if (tabId === 'view-clients') {
                fetchAndRenderClients();
            }
        }

        /**
         * Previews the selected logo for adding a new client.
         * @param {HTMLInputElement} input - The file input element.
         */
        function previewLogo(input) {
            const logoPreview = document.getElementById('logoPreview');
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    logoPreview.innerHTML = `<img src="${e.target.result}" class="logo-preview" alt="Logo preview">`;
                };
                reader.readAsDataURL(input.files[0]);
            } else {
                logoPreview.innerHTML = `
                    <div style="font-size: 48px; margin-bottom: 10px;">📷</div>
                    <p>Clique para adicionar logo</p>
                `;
            }
        }

        /**
         * Previews the selected logo for editing an existing client.
         * @param {HTMLInputElement} input - The file input element.
         */
        function previewEditLogo(input) {
            const logoPreview = document.getElementById('editLogoPreview');
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    logoPreview.innerHTML = `<img src="${e.target.result}" class="logo-preview" alt="Logo preview">`;
                };
                reader.readAsDataURL(input.files[0]);
            } else {
                const clientId = document.getElementById('editClientId').value;
                const client = clients.find(c => c.id == clientId);
                if (client && client.logo_url) {
                    logoPreview.innerHTML = `<img src="${client.logo_url}" class="logo-preview" alt="Logo preview">`;
                } else {
                     logoPreview.innerHTML = `
                        <div style="font-size: 48px; margin-bottom: 10px;">📷</div>
                        <p>Clique para adicionar logo</p>
                    `;
                }
            }
        }

        /**
         * Adds a product to the current client's product list.
         */
        function addProduct() {
            const productName = document.getElementById('productName').value;
            const productQuantity = document.getElementById('productQuantity').value;

            if (productName && productQuantity > 0) {
                currentProducts.push({ name: productName, quantity: parseInt(productQuantity) });
                updateProductsList('currentProducts', 'productsContainer');
                document.getElementById('productName').value = '';
                document.getElementById('productQuantity').value = '1';
                document.getElementById('productsList').style.display = 'block';
            } else {
                showAlert('Erro', 'Por favor, insira um nome e uma quantidade válida para o produto.');
            }
        }

        /**
         * Removes a product from a given list.
         * @param {number} index - The index of the product to remove.
         * @param {string} listType - The type of list ('currentProducts' or 'editingProducts').
         */
        function removeProduct(index, listType) {
            if (listType === 'currentProducts') {
                currentProducts.splice(index, 1);
                updateProductsList('currentProducts', 'productsContainer');
            } else if (listType === 'editingProducts') {
                editingProducts.splice(index, 1);
                updateProductsList('editingProducts', 'editProductsContainer');
            }
        }

        /**
         * Adds a product to the editing client's product list.
         */
        function addEditProduct() {
            const productName = document.getElementById('editProductName').value;
            const productQuantity = document.getElementById('editProductQuantity').value;

            if (productName && productQuantity > 0) {
                editingProducts.push({ name: productName, quantity: parseInt(productQuantity) });
                updateProductsList('editingProducts', 'editProductsContainer');
                document.getElementById('editProductName').value = '';
                document.getElementById('editProductQuantity').value = '1';
                document.getElementById('editProductsList').style.display = 'block';
            } else {
                showAlert('Erro', 'Por favor, insira um nome e uma quantidade válida para o produto.');
            }
        }

        /**
         * Updates the display of products in a given container.
         * @param {string} listName - The name of the product list ('currentProducts' or 'editingProducts').
         * @param {string} containerId - The ID of the HTML container to render products into.
         */
        function updateProductsList(listName, containerId) {
            const productsToRender = listName === 'currentProducts' ? currentProducts : editingProducts;
            const productsContainer = document.getElementById(containerId);
            const productsListDiv = document.getElementById(containerId === 'productsContainer' ? 'productsList' : 'editProductsList');

            if (productsToRender.length === 0) {
                productsContainer.innerHTML = '<p style="color: rgba(255,255,255,0.7);">Nenhum produto adicionado ainda.</p>';
                productsListDiv.style.display = 'none';
                return;
            }
            
            productsListDiv.style.display = 'block'; 
            productsContainer.innerHTML = productsToRender.map((product, index) => `
                <div class="product-item">
                    <span>${product.name} (x${product.quantity})</span>
                    <button class="delete-btn" onclick="removeProduct(${index}, '${listName}')">X</button>
                </div>
            `).join('');
        }

        /**
         * Displays the documents section for a specific client.
         * @param {number} clientId - The ID of the client.
         */
        async function viewClientDocuments(clientId) {
            const clientName = clients.find(c => c.id === clientId)?.name || `Cliente ID: ${clientId}`;
            
            let clientDocumentsSection = document.getElementById('view-client-documents');
            if (!clientDocumentsSection) {
                const clientsDiv = document.getElementById('clients');
                clientsDiv.insertAdjacentHTML('beforeend', `<div id="view-client-documents" class="client-tab-content" style="display:none;"></div>`);
                clientDocumentsSection = document.getElementById('view-client-documents');
            }
            
            clientDocumentsSection.innerHTML = `
                <div class="form-container">
                    <h3 style="margin-bottom: 20px;">Documentos de: ${clientName}</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="clientDocumentTitle">Título</label>
                            <input type="text" id="clientDocumentTitle" placeholder="Título do documento...">
                        </div>
                        <div class="form-group">
                            <label for="clientDocumentType">Tipo</label>
                            <select id="clientDocumentType">
                                <option value="">Selecione o tipo</option>
                                <option value="apresentacao">Apresentação</option>
                                <option value="relatorio">Relatório</option>
                                <option value="atas">Atas</option>
                                <option value="planilha">Planilha</option>
                                <option value="outro">Outro</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group" style="flex: 1;">
                            <label for="clientDocumentFile">Arquivo</label>
                            <div class="upload-area" onclick="document.getElementById('clientDocumentFile').click()">
                                <div class="upload-icon">📄</div>
                                <p>Arraste e solte ou clique para selecionar um arquivo</p>
                                <input type="file" id="clientDocumentFile" style="display: none;">
                            </div>
                        </div>
                    </div>
                    <button class="btn-secondary" onclick="addClientDocument(${clientId})">Adicionar Documento ao Cliente</button>
                    <button class="btn-secondary" onclick="showClientTab('view-clients')" style="margin-left: 10px;">Voltar aos Clientes</button>
                </div>

                <h3 style="margin-top: 40px; margin-bottom: 20px;">Documentos Existentes</h3>
                <div id="clientDocumentsList" class="documents-grid">
                    <div class="empty-state">
                        <div class="empty-state-icon">📁</div>
                        <p>Nenhum documento para este cliente.</p>
                    </div>
                </div>
            `;
            
            showClientTab('view-client-documents');
            await fetchAndRenderClientDocuments(clientId);
        }

        // --- Document Functions ---
        async function addDocument() {
            const title = document.getElementById('documentTitle').value;
            const author = document.getElementById('documentAuthor').value;
            const type = document.getElementById('documentType').value;
            const fileInput = document.getElementById('documentFile');
            const file = fileInput.files[0];

            if (title && author && type && file) {
                const filePath = `${Date.now()}_${file.name}`;
                const { data: uploadData, error: uploadError } = await supabase.storage
                    .from('documentfiles')
                    .upload(filePath, file);

                if (uploadError) {
                    console.error('Erro ao fazer upload do arquivo:', uploadError.message);
                    showAlert('Erro', 'Erro ao fazer upload do documento.');
                    return;
                }

                const publicURL = `${SUPABASE_URL}/storage/v1/object/public/documentfiles/${filePath}`;

                const { data, error } = await supabase
                    .from('documents')
                    .insert([
                        { title, author, type, file_url: publicURL, file_path: filePath }
                    ]);

                if (error) {
                    console.error('Erro ao adicionar documento no banco de dados:', error.message);
                    showAlert('Erro', 'Erro ao adicionar documento.');
                } else {
                    showAlert('Sucesso', 'Documento adicionado com sucesso!');
                    document.getElementById('documentTitle').value = '';
                    document.getElementById('documentAuthor').value = '';
                    document.getElementById('documentType').value = '';
                    fileInput.value = '';
                    fetchAndRenderDocuments();
                }
            } else {
                showAlert('Atenção', 'Por favor, preencha todos os campos e selecione um arquivo.');
            }
        }

        async function fetchAndRenderDocuments() {
            const { data, error } = await supabase
                .from('documents')
                .select('*');

            const container = document.getElementById('documentsList');

            if (error) {
                console.error('Erro ao buscar documentos:', error.message);
                container.innerHTML = `<div class="empty-state"><div class="empty-state-icon">❌</div><p>Erro ao carregar documentos.</p></div>`;
                return;
            }

            documents = data;

            if (documents.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">📁</div>
                        <p>Nenhum documento encontrado</p>
                        <p>Adicione documentos para começar</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = documents.map(doc => `
                <div class="document-card">
                    <div class="document-header">
                        <span class="document-type">${doc.type}</span>
                        <button class="delete-btn" onclick="deleteDocument(${doc.id}, '${doc.file_path}')">X</button>
                    </div>
                    <div class="document-title">${doc.title}</div>
                    <div class="document-author">${doc.author}</div>
                    <a href="${doc.file_url}" download="${doc.title}.${doc.file_url.split('.').pop()}" target="_blank" class="btn-secondary" style="margin-top: 15px; display: block; text-align: center;">Download</a>
                </div>
            `).join('');
        }

        async function deleteDocument(id, filePath) {
            const confirmed = await showConfirm('Confirmação', 'Tem certeza que deseja deletar este documento?');
            if (!confirmed) {
                return;
            }

            const { error: storageError } = await supabase.storage
                .from('documentfiles')
                .remove([filePath]);

            if (storageError) {
                console.error('Erro ao deletar arquivo do Storage:', storageError.message);
                showAlert('Erro', 'Erro ao deletar arquivo do Storage. Verifique as permissões do bucket.');
                return;
            }

            const { error: dbError } = await supabase
                .from('documents')
                .delete()
                .eq('id', id);

            if (dbError) {
                console.error('Erro ao deletar documento do banco de dados:', dbError.message);
                showAlert('Erro', 'Erro ao deletar documento do banco de dados. Verifique as permissões da tabela.');
            } else {
                showAlert('Sucesso', 'Documento deletado com sucesso!');
                fetchAndRenderDocuments();
            }
        }

        // --- Client Functions ---
        async function saveClient() {
            const name = document.getElementById('clientName').value;
            const email = document.getElementById('clientEmail').value;
            const phone = document.getElementById('clientPhone').value;
            const biLink = document.getElementById('clientBiLink').value;
            
            let logoUrl = null;
            let logoPath = null;

            if (name && email && phone) {
                const logoFileInput = document.getElementById('clientLogo'); 
                
                if (logoFileInput && logoFileInput.files && logoFileInput.files[0]) {
                    const logoFile = logoFileInput.files[0]; 
                    const logoFilePath = `logos/${Date.now()}_${logoFile.name}`;
                    
                    const { data: uploadData, error: uploadError } = await supabase.storage
                        .from('clientlogos') 
                        .upload(logoFilePath, logoFile);

                    if (uploadError) {
                        console.error('Erro ao fazer upload do logo:', uploadError.message);
                        showAlert('Erro', 'Erro ao fazer upload do logo. Verifique as permissões do bucket e o console.');
                        return;
                    }
                    
                    logoUrl = `${SUPABASE_URL}/storage/v1/object/public/clientlogos/${logoFilePath}`;
                    logoPath = logoFilePath;
                }

                const { data: clientData, error: clientError } = await supabase
                    .from('clients') 
                    .insert([
                        { name, email, phone, logo_url: logoUrl, logo_path: logoPath, bi_link: biLink }
                    ])
                    .select(); 

                if (clientError) {
                    console.error('Erro ao salvar cliente no banco de dados:', clientError.message);
                    showAlert('Erro', 'Erro ao salvar cliente. Verifique as permissões da tabela e o console.');
                    return;
                }

                const clientId = clientData[0].id;

                if (currentProducts.length > 0) {
                    const productsToInsert = currentProducts.map(p => ({
                        client_id: clientId,
                        name: p.name,
                        quantity: p.quantity
                    }));
                    const { error: productsError } = await supabase
                        .from('products') 
                        .insert(productsToInsert);

                    if (productsError) {
                        console.error('Erro ao salvar produtos:', productsError.message);
                        showAlert('Erro', 'Cliente salvo, mas erro ao salvar produtos. Verifique as permissões da tabela de produtos.');
                    }
                }
                
                showAlert('Sucesso', 'Cliente salvo com sucesso!');
                document.getElementById('clientName').value = '';
                document.getElementById('clientEmail').value = '';
                document.getElementById('clientPhone').value = '';
                document.getElementById('clientBiLink').value = '';
                if (logoFileInput) { 
                    logoFileInput.value = ''; 
                }
                document.getElementById('logoPreview').innerHTML = `
                    <div style="font-size: 48px; margin-bottom: 10px;">📷</div>
                    <p>Clique para adicionar logo</p>
                `;
                currentProducts = [];
                updateProductsList('currentProducts', 'productsContainer');
                fetchAndRenderClients(); 
                showClientTab('view-clients'); 
                
            } else {
                showAlert('Atenção', 'Por favor, preencha todos os campos obrigatórios do cliente.');
            }
        }

        async function fetchAndRenderClients() {
            const { data, error } = await supabase
                .from('clients')
                .select(`
                    *,
                    products (
                        id, name, quantity
                    )
                `);

            const container = document.getElementById('clientsList');

            if (error) {
                console.error('Erro ao buscar clientes:', error.message);
                container.innerHTML = `<div class="empty-state"><div class="empty-state-icon">❌</div><p>Erro ao carregar clientes.</p></div>`;
                return;
            }

            clients = data;

            if (clients.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">👥</div>
                        <p>Nenhum cliente encontrado</p>
                        <p>Adicione clientes para começar</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = clients.map(client => `
                <div class="client-card-vertical">
                    <div class="client-card-top">
                        <button class="delete-btn-card" onclick="deleteClient(${client.id}, '${client.logo_path || ''}')"><span style="font-size: 16px;">🗑️</span></button>
                        <span class="client-status-card">Ativo</span>
                    </div>
                    <div class="client-logo-vertical">
                        ${client.logo_url ? `<img src="${client.logo_url}" alt="Logo" class="logo-preview-vertical">` : client.name.charAt(0).toUpperCase()}
                    </div>
                    <p class="add-logo-text">${client.logo_url ? '' : 'Adicionar Logo'}</p>
                    <h3 class="client-name-vertical">${client.name}</h3>
                    <p class="client-status-text">Cliente Ativo</p>
                    <div class="products-info-vertical">
                        <div style="display: flex; align-items: center; gap: 5px; margin-bottom: 5px;">
                            <span style="font-size: 18px;">📦</span> <span style="font-weight: bold;">Produtos</span> (<span id="productCount-${client.id}">${client.products ? client.products.length : 0}</span>)
                        </div>
                        ${client.products && client.products.length > 0 ? client.products.map(p => `<p style="font-size: 14px; margin-left: 25px;">• ${p.name} (x${p.quantity})</p>`).join('') : '<p style="font-size: 14px; color: rgba(255,255,255,0.6); margin-left: 25px;">Nenhum produto</p>'}
                    </div>
                    <button class="btn-vertical" onclick="viewClientDocuments(${client.id})">Ver Documentos</button>
                    <button class="btn-vertical edit" onclick="editClient(${client.id})">Editar Cliente</button>
                </div>
            `).join('');
        }
        
        async function deleteClient(id, logoPath) {
            const confirmed = await showConfirm('Confirmação', 'Tem certeza que deseja deletar este cliente e todos os seus produtos e documentos? Esta ação é irreversível.');
            if (!confirmed) {
                return;
            }

            if (logoPath) {
                const { error: storageError } = await supabase.storage
                    .from('clientlogos') 
                    .remove([logoPath]);

                if (storageError) {
                    console.warn('Aviso: Erro ao deletar logo do Storage (pode não existir ou caminho incorreto). Continuando com a exclusão do cliente no DB:', storageError.message);
                }
            }

            const { error: dbError } = await supabase
                .from('clients') 
                .delete()
                .eq('id', id);

            if (dbError) {
                console.error('Erro ao deletar cliente do banco de dados:', dbError.message);
                showAlert('Erro', 'Erro ao deletar cliente do banco de dados. Verifique as permissões da tabela ou as regras ON DELETE CASCADE.');
            } else {
                showAlert('Sucesso', 'Cliente deletado com sucesso!');
                fetchAndRenderClients(); 
            }
        }

        async function editClient(clientId) {
            const clientToEdit = clients.find(c => c.id === clientId);

            if (!clientToEdit) {
                showAlert('Erro', 'Cliente não encontrado para edição.');
                return;
            }

            document.getElementById('editClientId').value = clientToEdit.id;
            document.getElementById('editClientName').value = clientToEdit.name;
            document.getElementById('editClientEmail').value = clientToEdit.email;
            document.getElementById('editClientPhone').value = clientToEdit.phone;
            document.getElementById('editClientBiLink').value = clientToEdit.bi_link || '';

            const editLogoPreview = document.getElementById('editLogoPreview');
            if (clientToEdit.logo_url) {
                editLogoPreview.innerHTML = `<img src="${clientToEdit.logo_url}" class="logo-preview" alt="Logo preview">`;
            } else {
                editLogoPreview.innerHTML = `
                    <div style="font-size: 48px; margin-bottom: 10px;">📷</div>
                    <p>Clique para adicionar logo</p>
                `;
            }

            editingProducts = clientToEdit.products ? [...clientToEdit.products] : [];
            updateProductsList('editingProducts', 'editProductsContainer');

            showClientTab('edit-client-tab');
        }

        async function updateClient() {
            const clientId = document.getElementById('editClientId').value;
            const name = document.getElementById('editClientName').value;
            const email = document.getElementById('editClientEmail').value;
            const phone = document.getElementById('editClientPhone').value;
            const biLink = document.getElementById('editClientBiLink').value;
            const logoFileInput = document.getElementById('editClientLogo');
            const newLogoFile = logoFileInput.files[0];

            if (!name || !email || !phone) {
                showAlert('Atenção', 'Por favor, preencha todos os campos obrigatórios.');
                return;
            }

            let logoUrl = null;
            let logoPath = null;
            const currentClient = clients.find(c => c.id == clientId);

            if (newLogoFile) {
                const newLogoPath = `logos/${Date.now()}_${newLogoFile.name}`;
                const { data: uploadData, error: uploadError } = await supabase.storage
                    .from('clientlogos') 
                    .upload(newLogoPath, newLogoFile);

                if (uploadError) {
                    console.error('Erro ao fazer upload do novo logo:', uploadError.message);
                    showAlert('Erro', 'Erro ao fazer upload do novo logo.');
                    return;
                }
                logoUrl = `${SUPABASE_URL}/storage/v1/object/public/clientlogos/${newLogoPath}`;
                logoPath = newLogoPath;

                if (currentClient && currentClient.logo_path) {
                    const { error: deleteOldLogoError } = await supabase.storage
                        .from('clientlogos')
                        .remove([currentClient.logo_path]);
                    if (deleteOldLogoError) {
                        console.warn('Aviso: Erro ao deletar logo antigo do Storage:', deleteOldLogoError.message);
                    }
                }
            } else {
                if (currentClient) {
                    logoUrl = currentClient.logo_url;
                    logoPath = currentClient.logo_path;
                }
            }

            const { error: clientError } = await supabase
                .from('clients')
                .update({ name, email, phone, logo_url: logoUrl, logo_path: logoPath, bi_link: biLink })
                .eq('id', clientId);

            if (clientError) {
                console.error('Erro ao atualizar cliente no banco de dados:', clientError.message);
                showAlert('Erro', 'Erro ao atualizar cliente.');
                return;
            }

            const { error: deleteProductsError } = await supabase
                .from('products')
                .delete()
                .eq('client_id', clientId);

            if (deleteProductsError) {
                console.error('Erro ao deletar produtos antigos:', deleteProductsError.message);
                showAlert('Erro', 'Cliente atualizado, mas erro ao limpar produtos antigos.');
            }

            if (editingProducts.length > 0) {
                const productsToInsert = editingProducts.map(p => ({
                    client_id: parseInt(clientId),
                    name: p.name,
                    quantity: p.quantity
                }));
                const { error: insertProductsError } = await supabase
                    .from('products')
                    .insert(productsToInsert);

                if (insertProductsError) {
                    console.error('Erro ao inserir novos produtos:', insertProductsError.message);
                    showAlert('Erro', 'Cliente atualizado, mas erro ao adicionar novos produtos.');
                }
            }

            showAlert('Sucesso', 'Cliente atualizado com sucesso!');
            logoFileInput.value = ''; 
            editingProducts = [];
            fetchAndRenderClients();
            showClientTab('view-clients');
        }

        async function addClientDocument(clientId) {
            const title = document.getElementById('clientDocumentTitle').value;
            const type = document.getElementById('clientDocumentType').value;
            const fileInput = document.getElementById('clientDocumentFile');
            const file = fileInput.files[0];

            if (title && type && file) {
                const filePath = `client_documents/${clientId}/${Date.now()}_${file.name}`;
                const { data: uploadData, error: uploadError } = await supabase.storage
                    .from('clientdocumentfiles') 
                    .upload(filePath, file);

                if (uploadError) {
                    console.error('Erro ao fazer upload do arquivo do cliente:', uploadError.message);
                    showAlert('Erro', 'Erro ao fazer upload do documento do cliente. Verifique as permissões do bucket.');
                    return;
                }

                const publicURL = `${SUPABASE_URL}/storage/v1/object/public/clientdocumentfiles/${filePath}`;

                const { data, error } = await supabase
                    .from('client_documents') 
                    .insert([
                        { client_id: clientId, title, type, file_url: publicURL, file_path: filePath }
                    ]);

                if (error) {
                    console.error('Erro ao adicionar documento do cliente no banco de dados:', error.message);
                    showAlert('Erro', 'Erro ao adicionar documento do cliente. Verifique as permissões da tabela.');
                } else {
                    showAlert('Sucesso', 'Documento do cliente adicionado com sucesso!');
                    document.getElementById('clientDocumentTitle').value = '';
                    document.getElementById('clientDocumentType').value = '';
                    fileInput.value = '';
                    fetchAndRenderClientDocuments(clientId); 
                }
            } else {
                showAlert('Atenção', 'Por favor, preencha todos os campos e selecione um arquivo para o documento do cliente.');
            }
        }

        async function fetchAndRenderClientDocuments(clientId) {
            const { data, error } = await supabase
                .from('client_documents') 
                .select('*')
                .eq('client_id', clientId);

            const container = document.getElementById('clientDocumentsList');

            if (error) {
                console.error('Erro ao buscar documentos do cliente:', error.message);
                container.innerHTML = `<div class="empty-state"><div class="empty-state-icon">❌</div><p>Erro ao carregar documentos do cliente.</p></div>`;
                return;
            }

            if (data.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">📁</div>
                        <p>Nenhum documento para este cliente.</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = data.map(doc => `
                <div class="document-card">
                    <div class="document-header">
                        <span class="document-type">${doc.type}</span>
                        <button class="delete-btn" onclick="deleteClientDocument(${doc.id}, '${doc.file_path}', ${clientId})">X</button>
                    </div>
                    <div class="document-title">${doc.title}</div>
                    <div class="document-author">ID do Cliente: ${doc.client_id}</div>
                    <a href="${doc.file_url}" download="${doc.title}.${doc.file_url.split('.').pop()}" target="_blank" class="btn-secondary" style="margin-top: 15px; display: block; text-align: center;">Download</a>
                </div>
            `).join('');
        }

        async function deleteClientDocument(documentId, filePath, clientId) {
            const confirmed = await showConfirm('Confirmação', 'Tem certeza que deseja deletar este documento do cliente?');
            if (!confirmed) {
                return;
            }

            const { error: storageError } = await supabase.storage
                .from('clientdocumentfiles') 
                .remove([filePath]);

            if (storageError) {
                console.error('Erro ao deletar arquivo do Storage do cliente:', storageError.message);
                showAlert('Erro', 'Erro ao deletar arquivo do Storage do cliente. Verifique as permissões do bucket.');
                return;
            }

            const { error: dbError } = await supabase
                .from('client_documents') 
                .delete()
                .eq('id', documentId);

            if (dbError) {
                console.error('Erro ao deletar documento do cliente do banco de dados:', dbError.message);
                showAlert('Erro', 'Erro ao deletar documento do cliente do banco de dados. Verifique as permissões da tabela.');
            } else {
                showAlert('Sucesso', 'Documento do cliente deletado com sucesso!');
                fetchAndRenderClientDocuments(clientId); 
            }
        }

        // --- Dashboard Functions ---
        async function fetchAndRenderDashboards() {
            const { data, error } = await supabase
                .from('clients')
                .select('id, name, logo_url, bi_link')
                .not('bi_link', 'is', null)
                .not('bi_link', 'eq', '');

            const container = document.getElementById('dashboardsList');

            if (error) {
                console.error('Erro ao buscar dashboards:', error.message);
                container.innerHTML = `<div class="empty-state"><div class="empty-state-icon">❌</div><p>Erro ao carregar dashboards.</p></div>`;
                return;
            }

            if (data.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">📊</div>
                        <p>Nenhum Dashboard de cliente encontrado.</p>
                        <p>Adicione clientes com links de BI para visualizá-los aqui.</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = data.map(client => `
                <div class="dashboard-card">
                    <div class="client-logo-vertical">
                        ${client.logo_url ? `<img src="${client.logo_url}" alt="Logo" class="logo-preview-vertical">` : client.name.charAt(0).toUpperCase()}
                    </div>
                    <h3>${client.name}</h3>
                    <a href="${client.bi_link}" target="_blank" class="btn-bi">
                        <i class="fas fa-external-link-alt"></i> Acessar
                    </a>
                </div>
            `).join('');
        }

        // --- Homologation Tab Functions ---
        /**
         * Switches between homologation sub-tabs.
         * @param {Event} evt - The event object (can be null if called programmatically).
         * @param {string} tabName - The ID of the homologation sub-tab to show.
         */
        function openHomologacaoTab(evt, tabName) {
            document.querySelectorAll('#homologacao .tab-content').forEach(content => {
                content.style.display = 'none';
                content.classList.remove('active');
            });
            document.querySelectorAll('#homologacao .tab-button').forEach(button => {
                button.classList.remove('active');
            });

            const tab = document.getElementById(tabName);
            if (tab) {
                tab.style.display = 'block';
                tab.classList.add('active');
            }
            if (evt && evt.currentTarget) {
                evt.currentTarget.classList.add('active');
            }

            if (tabName === 'listaHomologacoes') {
                fetchAndRenderHomologacoes();
            }
        }

        // File upload logic for homologation form
        const uploadAreaHomologacao = document.getElementById('uploadAreaHomologacao');
        const fileInputHomologacao = document.getElementById('fileInputHomologacao');
        const fileListHomologacao = document.getElementById('fileListHomologacao');

        uploadAreaHomologacao.addEventListener('click', () => fileInputHomologacao.click());

        uploadAreaHomologacao.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadAreaHomologacao.classList.add('dragover');
        });

        uploadAreaHomologacao.addEventListener('dragleave', () => {
            uploadAreaHomologacao.classList.remove('dragover');
        });

        uploadAreaHomologacao.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadAreaHomologacao.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            adicionarArquivosHomologacao(files);
        });

        fileInputHomologacao.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            adicionarArquivosHomologacao(files);
        });

        /**
         * Adds files to the homologation selected files list.
         * @param {File[]} files - Array of File objects.
         */
        function adicionarArquivosHomologacao(files) {
            files.forEach(file => {
                if (file.size > 10 * 1024 * 1024) {
                    showAlert('Atenção', `Arquivo ${file.name} é muito grande. Limite: 10MB`);
                    return;
                }
                
                if (!arquivosHomologacaoSelecionados.find(f => f.name === file.name)) {
                    arquivosHomologacaoSelecionados.push(file);
                    criarItemArquivoHomologacao(file);
                }
            });
        }

        /**
         * Creates an HTML item for a selected homologation file.
         * @param {File} file - The File object.
         */
        function criarItemArquivoHomologacao(file) {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <span class="file-name">📄 ${file.name}</span>
                    <span class="file-size">(${formatarTamanho(file.size)})</span>
                </div>
                <button type="button" class="remove-file" onclick="removerArquivoHomologacao('${file.name}')">
                    ❌ Remover
                </button>
            `;
            fileListHomologacao.appendChild(fileItem);
        }

        /**
         * Removes a file from the homologation selected files list.
         * @param {string} nomeArquivo - The name of the file to remove.
         */
        function removerArquivoHomologacao(nomeArquivo) {
            arquivosHomologacaoSelecionados = arquivosHomologacaoSelecionados.filter(f => f.name !== nomeArquivo);
            const fileItems = fileListHomologacao.children;
            for (let item of fileItems) {
                if (item.querySelector('.file-name').textContent.includes(nomeArquivo)) {
                    fileListHomologacao.removeChild(item);
                    break;
                }
            }
        }

        /**
         * Formats file size into a human-readable string.
         * @param {number} bytes - The size in bytes.
         * @returns {string} Formatted size string.
         */
        function formatarTamanho(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Homologation form submission
        document.getElementById('homologacaoForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const especialista = document.getElementById('especialista').value;
            const versao = document.getElementById('versao').value;
            const dataLiberacao = document.getElementById('dataLiberacao').value;
            const dataHomologacao = document.getElementById('dataHomologacao').value;
            const sistema = document.getElementById('sistema').value;
            const observacao = document.getElementById('observacao').value;

            const btn = document.querySelector('#homologacaoForm .btn-primary');
            const textoOriginal = btn.innerHTML;
            btn.innerHTML = '⏳ Enviando...';
            btn.disabled = true;

            let arquivosParaSalvar = [];

            for (let file of arquivosHomologacaoSelecionados) {
                const path = `homologacoes/${Date.now()}_${file.name}`;
                const { data, error } = await supabase.storage.from('homologacaoarquivos').upload(path, file);
                if (error) {
                    showAlert('Erro', `Erro ao enviar o arquivo ${file.name}: ${error.message}`);
                    btn.innerHTML = textoOriginal;
                    btn.disabled = false;
                    return;
                }
                // Store both the public URL and the internal path for future downloads
                const { data: publicData } = supabase.storage.from('homologacaoarquivos').getPublicUrl(path);
                arquivosParaSalvar.push({ nome: file.name, path: path, url: publicData.publicUrl });
            }

            const { error: insertError } = await supabase.from('homologacoes').insert([{
                especialista,
                versao,
                data_liberacao: dataLiberacao,
                data_homologacao: dataHomologacao || null,
                sistema,
                observacao,
                arquivos: arquivosParaSalvar // Corrected typo here
            }]);

            btn.innerHTML = textoOriginal;
            btn.disabled = false;

            if (insertError) {
                showAlert('Erro', 'Erro ao salvar homologação: ' + insertError.message);
                console.error(insertError);
            } else {
                showAlert('Sucesso', 'Homologação salva com sucesso!');
                limparHomologacaoForm();
                fetchAndRenderHomologacoes();
                openHomologacaoTab(null, 'listaHomologacoes'); // Switch to list tab after saving
            }
        });

        /**
         * Clears the homologation form.
         */
        function limparHomologacaoForm() {
            document.getElementById('homologacaoForm').reset();
            arquivosHomologacaoSelecionados = [];
            fileListHomologacao.innerHTML = '';
            document.getElementById('fileInputHomologacao').value = '';
        }

        // Set default date for dataLiberacao
        document.getElementById('dataLiberacao').valueAsDate = new Date();

        /**
         * Fetches and renders homologations from Supabase.
         */
        async function fetchAndRenderHomologacoes() {
            const { data, error } = await supabase
                .from('homologacoes')
                .select('*')
                .order('data_liberacao', { ascending: false });

            const grid = document.getElementById('homologacoesGrid');
            const empty = document.getElementById('emptyStateHomologacao');

            if (error || !data || data.length === 0) {
                grid.innerHTML = '';
                empty.style.display = 'flex';
                return;
            }

            empty.style.display = 'none';
            grid.innerHTML = data.map(h => {
                // Encode the entire 'arquivos' array as a JSON string to pass to the onclick function
                const arquivosData = encodeURIComponent(JSON.stringify(h.arquivos || []));
                
                let html = "";
                html += '<div class="homologacao-card">';
                html += '<h4>Versão: ' + h.versao + '</h4>';
                html += '<p><strong>Especialista:</strong> ' + h.especialista + '</p>';
                html += '<p><strong>Sistema:</strong> ' + h.sistema + '</p>';
                html += '<p><strong>Liberação:</strong> ' + h.data_liberacao + '</p>';
                html += '<p><strong>Homologação:</strong> ' + (h.data_homologacao || '-') + '</p>';
                html += '<p><strong>Obs:</strong> ' + (h.observacao || '-') + '</p>';
                if (h.arquivos && h.arquivos.length) {
                    html += '<p><strong>Arquivos:</strong><br>' +
                        h.arquivos.map((file, i) =>
                            `<span>📄 ${file.nome}</span>`
                        ).join('<br>') +
                    '</p>';
                    // Pass the encoded JSON string to a data attribute, and call a wrapper function
                    html += `<button class="btn-exportar" data-arquivos="${arquivosData}" onclick="baixarArquivosHomologacaoFromButton(this)">📥 Baixar Todos</button>`;
                }
                // Pass the encoded JSON string to a data attribute, and call a wrapper function
                html += `<button class="btn-exportar" style="background-color: var(--error-color); margin-left: 10px;" data-arquivos="${arquivosData}" onclick="deleteHomologacaoFromButton(this, ${h.id})">🗑️ Excluir</button>`;
                html += '</div>';
                return html;
            }).join('');
        }

        /**
         * Filters homologations based on system and specialist.
         */
        async function filtrarHomologacoes() {
            const sistemaFiltro = document.getElementById('filtroSistema').value.toLowerCase();
            const especialistaFiltro = document.getElementById('filtroEspecialista').value.toLowerCase();

            const { data, error } = await supabase
                .from('homologacoes')
                .select('*')
                .order('data_liberacao', { ascending: false });

            if (error || !data) {
                console.error("Erro ao filtrar homologações:", error);
                return;
            }

            const filtradas = data.filter(h =>
                (!sistemaFiltro || h.sistema.toLowerCase().includes(sistemaFiltro)) &&
                (!especialistaFiltro || h.especialista.toLowerCase().includes(especialistaFiltro))
            );

            const grid = document.getElementById('homologacoesGrid');
            const empty = document.getElementById('emptyStateHomologacao');

            if (filtradas.length === 0) {
                grid.innerHTML = '';
                empty.style.display = 'flex';
            } else {
                empty.style.display = 'none';
                grid.innerHTML = filtradas.map(h => {
                    const arquivosData = encodeURIComponent(JSON.stringify(h.arquivos || []));
                    let html = '';
                    html += '<div class="homologacao-card">';
                    html += '<h4>Versão: ' + h.versao + '</h4>';
                    html += '<p><strong>Especialista:</strong> ' + h.especialista + '</p>';
                    html += '<p><strong>Sistema:</strong> ' + h.sistema + '</p>';
                    html += '<p><strong>Liberação:</strong> ' + h.data_liberacao + '</p>';
                    html += '<p><strong>Homologação:</strong> ' + (h.data_homologacao || '-') + '</p>';
                    html += '<p><strong>Obs:</strong> ' + (h.observacao || '-') + '</p>';
                    if (h.arquivos && h.arquivos.length) {
                        html += '<p><strong>Arquivos:</strong><br>' +
                            h.arquivos.map((file, i) =>
                                `<span>📄 ${file.nome}</span>`
                            ).join('<br>') +
                        '</p>';
                        html += `<button class="btn-exportar" data-arquivos="${arquivosData}" onclick="baixarArquivosHomologacaoFromButton(this)">📥 Baixar Todos</button>`;
                    }
                    html += `<button class="btn-exportar" style="background-color: var(--error-color); margin-left: 10px;" data-arquivos="${arquivosData}" onclick="deleteHomologacaoFromButton(this, ${h.id})">🗑️ Excluir</button>`;
                    html += '</div>';
                    return html;
                }).join('');
            }
        }

        /**
         * Downloads multiple files associated with a homologation.
         * @param {string} arquivosJsonString - JSON string of the files array.
         */
        async function baixarArquivosHomologacao(arquivosJsonString) {
            const arquivos = JSON.parse(arquivosJsonString);

            if (!arquivos || arquivos.length === 0) {
                showAlert("Informação", "Nenhum arquivo para baixar.");
                return;
            }

            for (const arquivo of arquivos) {
                try {
                    // Use the 'path' property to get a signed URL for download
                    const { data, error } = await supabase
                        .storage
                        .from('homologacaoarquivos')
                        .createSignedUrl(arquivo.path, 60, { download: true }); // URL valid for 60 seconds

                    if (error) {
                        console.error("Erro ao gerar URL assinada para", arquivo.nome, error);
                        showAlert("Erro", `Erro ao baixar o arquivo ${arquivo.nome}.`);
                        continue;
                    }

                    if (data?.signedUrl) {
                        const response = await fetch(data.signedUrl);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        const blob = await response.blob();
                        const link = document.createElement("a");
                        link.href = URL.createObjectURL(blob);
                        link.download = arquivo.nome; // Use the original file name
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        URL.revokeObjectURL(link.href); // Clean up the object URL
                    } else {
                        showAlert("Erro", `URL assinada não gerada para o arquivo ${arquivo.nome}.`);
                    }
                } catch (error) {
                    console.error("Erro ao baixar arquivo:", arquivo.nome, error);
                    showAlert("Erro", `Falha ao baixar o arquivo ${arquivo.nome}.`);
                }
            }
        }

        /**
         * Deletes a homologation record and its associated files.
         * @param {number} id - The ID of the homologation to delete.
         * @param {string} arquivosJsonString - JSON string of the files array associated with the homologation.
         */
        async function deleteHomologacao(id, arquivosJsonString) {
            const confirmed = await showConfirm('Confirmação', 'Tem certeza que deseja excluir esta homologação e seus arquivos?');
            if (!confirmed) {
                return;
            }

            const arquivos = JSON.parse(arquivosJsonString);
            
            // Delete files from storage first
            if (arquivos && arquivos.length > 0) {
                const pathsToDelete = arquivos.map(a => a.path);
                const { error: storageError } = await supabase.storage
                    .from('homologacaoarquivos')
                    .remove(pathsToDelete);

                if (storageError) {
                    console.warn('Aviso: Erro ao deletar arquivos do Storage (podem não existir ou caminho incorreto):', storageError.message);
                    // Do not return, try to delete from DB anyway
                }
            }

            // Delete record from database
            const { error: dbError } = await supabase
                .from('homologacoes')
                .delete()
                .eq('id', id);

            if (dbError) {
                console.error('Erro ao deletar homologação do banco de dados:', dbError.message);
                showAlert('Erro', 'Erro ao deletar homologação do banco de dados. Verifique as permissões da tabela.');
            } else {
                showAlert('Sucesso', 'Homologação excluída com sucesso!');
                fetchAndRenderHomologacoes(); // Re-render the list
            }
        }

        /**
         * Wrapper function to handle downloading files from a button's data-arquivos attribute.
         * @param {HTMLButtonElement} button - The button element that was clicked.
         */
        function baixarArquivosHomologacaoFromButton(button) {
            const arquivosJsonString = decodeURIComponent(button.dataset.arquivos);
            baixarArquivosHomologacao(arquivosJsonString);
        }

        /**
         * Wrapper function to handle deleting homologations from a button's data-arquivos attribute.
         * @param {HTMLButtonElement} button - The button element that was clicked.
         * @param {number} homologacaoId - The ID of the homologation to delete.
         */
        async function deleteHomologacaoFromButton(button, homologacaoId) {
            const arquivosJsonString = decodeURIComponent(button.dataset.arquivos);
            await deleteHomologacao(homologacaoId, arquivosJsonString);
        }

        // Initial tab load
        document.addEventListener('DOMContentLoaded', () => {
            showTab('dashboard'); // Default tab on load
        });
    </script>
</body>
</html>